name: CI/CD Pipeline

on:
  push:
    branches: ["main" ]
  pull_request:
    branches: ["main"]

env:
  AZURE_WEBAPP_NAME: secure-cart-uow  # set this to the name of your Azure Web App
  PYTHON_VERSION: '3.12'              # set this to the Python version to use

permissions:
  contents: read

jobs:
  snyk:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Snyk CLI to check for security issues
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

        # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
        # Use || true to not fail the pipeline        
      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

        # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

          
  codeql-analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
        - language: python
          build-mode: none
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}

    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Create and start virtual environment
        run: |
          python -m venv antenv
          source antenv/bin/activate
          pip install -r requirements.txt

      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            .
            !antenv/

  security_gate:
    runs-on: ubuntu-latest
    needs: [build, codeql-analyze, snyk]
    permissions:
      contents: read
      security-events: read # Required to read security alerts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get and Check Code Scanning Alerts
        id: check_alerts
        run: |
          # Use GitHub CLI to get all open Code Scanning alerts for the current ref (branch/commit)
          # Filtering for CRITICAL or HIGH severity alerts
          ALERTS=$(gh api graphql -f query='
            query($owner: String!, $repo: String!, $ref: String!) {
              repository(owner: $owner, name: $repo) {
                vulnerabilityAlerts(first: 100, states: OPEN, after: null) {
                  nodes {
                    createdAt
                    securityVulnerability {
                      severity
                      package { name }
                    }
                    state
                    dismissedAt
                    dismissedBy { login }
                    dismissedReason
                  }
                }
              }
            }' -F owner='${{ github.repository_owner }}' -F repo='${{ github.event.repository.name }}' -F ref='${{ github.ref }}' | jq -r '.data.repository.vulnerabilityAlerts.nodes[] | select(.state == "OPEN" and (.securityVulnerability.severity == "CRITICAL" or .securityVulnerability.severity == "HIGH"))')

          if [ -n "$ALERTS" ]; then
            echo "::error::Critical or High vulnerabilities found!"
            echo "Vulnerabilities detected:"
            echo "$ALERTS"
            echo "::set-output name=vulnerabilities_found::true"
            exit 1 # Fail the job if vulnerabilities are found
          else
            echo "No open Critical or High vulnerabilities found."
            echo "::set-output name=vulnerabilities_found::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN is automatically provided with necessary permissions
  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: security_gate
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app
          path: .

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
